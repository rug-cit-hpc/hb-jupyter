#!/usr/bin/env bash

<%-
   cuda = (context.node_type == "gpu") ? context.cuda_version : ""
   wrapper = session.staged_root.join("launch_wrapper.sh")
   wrapper_log = session.staged_root.join("launch_wrapper.log")
   kernels = {
       python36: {
           display_name: "Python 3.6 [Python/3.6.4-foss-2018a]",
           language: "python",
           argv: [
               wrapper,
               "python",
               "-m",
               "ipykernel_launcher",
               "-f",
               "{connection_file}"
           ],
       env: {
           MODULES: "Python/3.6.4-foss-2018a"
       }
   },
       python36cuda: {
           display_name: "Python 3.6 [Python/3.6.4-fosscuda-2018a]",
           language: "python",
           argv: [
               wrapper,
               "python",
               "-m",
               "ipykernel_launcher",
               "-f",
               "{connection_file}"
           ],
       env: {
           MODULES: "Python/3.6.4-fosscuda-2018a TensorFlow/1.12.0-foss-2018a-Python-3.6.4 #{cuda}"
       }
   },
}
-%>

echo "Starting main script..."
echo "TTT - $(date)"

#
# Start Jupyter server
#

# Clean the environment
module purge

# Create launcher wrapper
echo "Creating launcher wrapper script..."
(
umask 077
sed 's/^ \{2\}//' > "<%= wrapper %>" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  exec &>>"<%= wrapper_log %>"

  # Load the required environment
  module purge
  module load \${MODULES}
  module list

  # Launch the original command
  set -x
  exec "\${@}"
EOL
)
chmod 700 "<%= wrapper %>"
echo "TTT - $(date)"

# Create custom Jupyter kernels
echo "Creating custom Jupyter kernels..."
export JUPYTER_PATH="${PWD}/share/jupyter"
echo "JUPYTER_PATH = " $JUPYTER_PATH
<%- kernels.each do |name, kernel| -%>
<%- path = "${JUPYTER_PATH}/kernels/sys_#{name}" -%>
mkdir -p "<%= path %>"
cp "${PWD}/assets/<%= name.to_s.gsub(/\d/, "") %>"/* "<%= path %>/."

(
umask 077
cat > "<%= path %>/kernel.json" << EOL
<%= JSON.pretty_generate kernel %>
EOL
)
<%- end -%>
echo "TTT - $(date)"

# Setup Jupyter environment
module use $MODULEPATH_ROOT/project/ondemand
module load <%= context.modules %>
module list
echo "TTT - $(date)"

# Create user-created Conda env Jupyter kernels
echo "Creating custom Jupyter kernels from user-created Conda environments..."
for dir in ${HOME}/.conda/envs/*/ ; do
  (
  umask 077
  set -e
  echo ${dir}
  KERNEL_NAME=$(basename ${dir})
  KERNEL_PATH="~${dir#${HOME}}"
  echo $KERNEL_NAME
  echo $KERNEL_PATH
  if [[ -x "${dir}bin/activate" ]] ; then exit 0 ; else
    echo "Creating kernel for ${dir}..."
    source activate "${dir}"
    set -x
    if [[ "$(conda list -f --json ipykernel)" == "[]" ]]; then
      CONDA_PKGS_DIRS="$(mktemp -d)" conda install --yes --quiet --no-update-deps ipykernel
    fi
    python \
      -m ipykernel \
        install \
        --name "conda_${KERNEL_NAME}" \
        --display-name "${KERNEL_NAME} [${KERNEL_PATH}]" \
        --prefix "${PWD}"
  fi
) &
done
wait
echo "TTT - $(date)"

# Set working directory to notebook root directory
cd "${NOTEBOOK_ROOT}"

# List available kernels for debugging purposes
set -x
jupyter kernelspec list
{ set +x; } 2>/dev/null
echo "TTT - $(date)"

# Launch the Jupyter server
set -x
jupyter <%= context.jupyterlab_switch == "1" ? "lab" : "notebook" %> --config="${CONFIG_FILE}"
