#!/usr/bin/env bash

<%-
  cuda = (context.node_type == "gpu") ? context.cuda_version : ""
  wrapper = session.staged_root.join("launch_wrapper.sh")
  wrapper_log = session.staged_root.join("launch_wrapper.log")

  kernels = {
    python36: {
      display_name: "Python 3.6 [python/3.6 #{cuda}]",
      language: "python",
      argv: [
        wrapper,
        "python",
        "-m",
        "ipykernel_launcher",
        "-f",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest python/3.6 #{cuda}"
      }
    },
    python35: {
      display_name: "Python 3.5 [python/3.5 #{cuda}]",
      language: "python",
      argv: [
        wrapper,
        "python",
        "-m",
        "ipykernel",
        "-f",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest python/3.5 #{cuda}"
      }
    },
    python27: {
      display_name: "Python 2.7 [python/2.7 #{cuda}]",
      language: "python",
      argv: [
        wrapper,
        "python",
        "-m",
        "ipykernel",
        "-f",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest python/2.7 #{cuda}"
      }
    },
    python27conda: {
      display_name: "Python 2.7 (Conda 5.2) [python/2.7 #{cuda}]",
      language: "python",
      argv: [
        wrapper,
        "python",
        "-m",
        "ipykernel",
        "-f",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest python/2.7-conda5.2 #{cuda}"
      }
    },
    julia051: {
      display_name: "Julia 0.5.1 [julia/0.5.1 #{cuda}]",
      language: "julia",
      argv: [
        wrapper,
        "julia",
        "-i",
        "--startup-file=yes",
        "--color=yes",
        "/usr/local/julia/0.5.1/share/julia/site/v0.5/IJulia/src/kernel.jl",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest julia/0.5.1 #{cuda}"
      }
    },
    julia064: {
      display_name: "Julia 0.6.4 [julia/0.6.4 #{cuda}]",
      language: "julia",
      argv: [
        wrapper,
        "julia",
        "-i",
        "--startup-file=yes",
        "--color=yes",
        "/usr/local/julia/0.6.4/site/v0.6/IJulia/src/kernel.jl",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest julia/0.6.4 #{cuda}"
      }
    },
    julia100: {
      display_name: "Julia 1.0.0 [julia/1.0.0 #{cuda}]",
      language: "julia",
      argv: [
        wrapper,
        "julia",
        "-i",
        "--startup-file=yes",
        "--color=yes",
        "/usr/local/julia/1.0.0/site/packages/IJulia/9RcVi/src/kernel.jl",
        "{connection_file}"
      ],
      env: {
        MODULES: "xalt/latest julia/1.0.0 #{cuda}"
      }
    },
  }
-%>

echo "Starting main script..."
echo "TTT - $(date)"

#
# Start Jupyter server
#

# Clean the environment
module purge

# Create launcher wrapper
echo "Creating launcher wrapper script..."
(
umask 077
sed 's/^ \{2\}//' > "<%= wrapper %>" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  exec &>>"<%= wrapper_log %>"

  # Load the required environment
  module purge
  module load xalt/latest \${MODULES}
  module list

  # Launch the original command
  set -x
  exec "\${@}"
EOL
)
chmod 700 "<%= wrapper %>"
echo "TTT - $(date)"

# Create custom Jupyter kernels
echo "Creating custom Jupyter kernels..."
export JUPYTER_PATH="${PWD}/share/jupyter"
<%- kernels.each do |name, kernel| -%>
<%- path = "${JUPYTER_PATH}/kernels/sys_#{name}" -%>
mkdir -p "<%= path %>"
cp "${PWD}/assets/<%= name.to_s.gsub(/\d/, "") %>"/* "<%= path %>/."
(
umask 077
cat > "<%= path %>/kernel.json" << EOL
<%= JSON.pretty_generate kernel %>
EOL
)
<%- end -%>
echo "TTT - $(date)"

# Create user-created Conda env Jupyter kernels
echo "Creating custom Jupyter kernels from user-created Conda environments..."
for dir in "${HOME}/.conda/envs"/*/ "${HOME}/envs"/*/ ; do
  (
  umask 077
  set -e
  KERNEL_NAME="$(basename "${dir}")"
  KERNEL_PATH="~${dir#${HOME}}"
  [[ -x "${dir}bin/activate" ]] || exit 0
  echo "Creating kernel for ${dir}..."
  source "${dir}bin/activate" "${dir}"
  set -x
  if [[ "$(conda list -f --json ipykernel)" == "[]" ]]; then
    CONDA_PKGS_DIRS="$(mktemp -d)" conda install --yes --quiet --no-update-deps ipykernel
  fi
  python \
    -m ipykernel \
      install \
      --name "conda_${KERNEL_NAME}" \
      --display-name "${KERNEL_NAME} [${KERNEL_PATH}]" \
      --prefix "${PWD}"
  ) &
done
wait
echo "TTT - $(date)"

# Set working directory to notebook root directory
cd "${NOTEBOOK_ROOT}"

# Setup Jupyter environment
module use $MODULEPATH_ROOT/project/ondemand
module load xalt/latest <%= context.version %>
module list
echo "TTT - $(date)"

# List available kernels for debugging purposes
set -x
jupyter kernelspec list
{ set +x; } 2>/dev/null
echo "TTT - $(date)"

# Launch the Jupyter server
set -x
jupyter <%= context.jupyterlab_switch == "1" ? "lab" : "notebook" %> --config="${CONFIG_FILE}"



# Benchmark info
echo "TIMING - Starting main script at: $(date)"

# Set working directory to home directory
#cd "${HOME}"

#
# Start Jupyter Notebook Server
#

#<%- unless context.modules.blank? -%>
# Purge the module environment to avoid conflicts
#module purge

# Load the require modules
#module load <%= context.modules %>

# List loaded modules
#module list
#<%- end -%>

# Benchmark info
#echo "TIMING - Starting jupyter at: $(date)"

# Launch the Jupyter Notebook Server
#set -x
#jupyter notebook --config="${CONFIG_FILE}" <%= context.extra_jupyter_args %>
